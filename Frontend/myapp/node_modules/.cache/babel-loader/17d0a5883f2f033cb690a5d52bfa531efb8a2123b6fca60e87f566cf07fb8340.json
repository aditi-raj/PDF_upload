{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aditi\\\\Pdf_upload\\\\Frontend\\\\myapp\\\\src\\\\components\\\\PDFUpload\\\\PDFUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './PDFUpload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PDFUpload({\n  setUploadedFile,\n  setLoading,\n  setError\n}) {\n  _s();\n  const onDrop = useCallback(async acceptedFiles => {\n    const file = acceptedFiles[0];\n    if ((file === null || file === void 0 ? void 0 : file.type) !== 'application/pdf') {\n      setError('Please upload a PDF file');\n      return;\n    }\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch('http://localhost:8000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) throw new Error('Upload failed');\n      const data = await response.json();\n      setUploadedFile(data);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [setUploadedFile, setLoading, setError]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'application/pdf': ['.pdf']\n    },\n    multiple: false\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...getRootProps(),\n    className: \"pdf-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/upload-icon.svg\",\n        alt: \"Upload\",\n        className: \"upload-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drop the PDF file here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag & drop a PDF file here, or click to select one\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"upload-hint\",\n          children: \"Supported formats: PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(PDFUpload, \"yd//yJtVY5DqPYzQY0xGsdgoRlk=\", false, function () {\n  return [useDropzone];\n});\n_c = PDFUpload;\nexport default PDFUpload;\nvar _c;\n$RefreshReg$(_c, \"PDFUpload\");","map":{"version":3,"names":["React","useCallback","useDropzone","jsxDEV","_jsxDEV","PDFUpload","setUploadedFile","setLoading","setError","_s","onDrop","acceptedFiles","file","type","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","err","message","getRootProps","getInputProps","isDragActive","accept","multiple","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/aditi/Pdf_upload/Frontend/myapp/src/components/PDFUpload/PDFUpload.js"],"sourcesContent":["import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport './PDFUpload.css';\r\n\r\nfunction PDFUpload({ setUploadedFile, setLoading, setError }) {\r\n    const onDrop = useCallback(async (acceptedFiles) => {\r\n        const file = acceptedFiles[0];\r\n        if (file?.type !== 'application/pdf') {\r\n            setError('Please upload a PDF file');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n\r\n            const response = await fetch('http://localhost:8000/upload', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Upload failed');\r\n\r\n            const data = await response.json();\r\n            setUploadedFile(data);\r\n            setError(null);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [setUploadedFile, setLoading, setError]);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n        onDrop,\r\n        accept: {'application/pdf': ['.pdf']},\r\n        multiple: false\r\n    });\r\n\r\n    return (\r\n        <div {...getRootProps()} className=\"pdf-upload-container\">\r\n            <input {...getInputProps()} />\r\n            <div className=\"upload-content\">\r\n                <img src=\"/upload-icon.svg\" alt=\"Upload\" className=\"upload-icon\" />\r\n                {isDragActive ? (\r\n                    <p>Drop the PDF file here...</p>\r\n                ) : (\r\n                    <div className=\"upload-text\">\r\n                        <p>Drag & drop a PDF file here, or click to select one</p>\r\n                        <p className=\"upload-hint\">Supported formats: PDF</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PDFUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}