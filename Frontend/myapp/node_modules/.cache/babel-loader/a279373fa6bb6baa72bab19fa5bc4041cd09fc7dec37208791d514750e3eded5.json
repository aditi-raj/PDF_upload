{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aditi\\\\PDF_upload\\\\Frontend\\\\myapp\\\\src\\\\components\\\\MainContent\\\\MainContent.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useEffect } from 'react';\n// import styles from './MainContent.module.css';\n\n// function MainContent({ messages, isLoading }) {\n//     const messagesEndRef = useRef(null);\n\n//     const scrollToBottom = () => {\n//         messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//     };\n\n//     useEffect(() => {\n//         scrollToBottom();\n//     }, [messages]);\n\n//     return (\n//         <div className={styles.mainContent}>\n//             {messages.length === 0 && (\n//                 <div className={styles.emptyState}>\n//                     Upload a PDF and ask questions about it!\n//                 </div>\n//             )}\n//             {messages.map((message, index) => (\n//                 <div \n//                     key={index} \n//                     className={`${styles.message} ${styles[message.type]}`}\n//                 >\n//                     {message.type === 'user' && (\n//                         <div className={styles.avatar}>You</div>\n//                     )}\n//                     {message.type === 'assistant' && (\n//                         <div className={styles.avatar}>AI</div>\n//                     )}\n//                     <div className={styles.messageContent}>\n//                         {message.content}\n//                     </div>\n//                 </div>\n//             ))}\n//             {isLoading && (\n//                 <div className={styles.loading}>\n//                     <div className={styles.loadingDots}>\n//                         <span></span>\n//                         <span></span>\n//                         <span></span>\n//                     </div>\n//                 </div>\n//             )}\n//             <div ref={messagesEndRef} />\n//         </div>\n//     );\n// }\n\n// export default MainContent;\n\nimport React, { useRef, useEffect } from 'react';\nimport styles from './MainContent.module.css';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainContent({\n  messages,\n  isLoading\n}) {\n  _s();\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const renderMessageContent = message => {\n    if (message.type === 'assistant') {\n      // Format the content to match the desired structure\n      let formattedContent = message.content\n      // First, handle the sections with double stars\n      .replace(/\\*\\*([^*]+)\\*\\*/g, '\\n## $1\\n')\n      // Then handle single stars as bullet points, but not inside code blocks\n      .replace(/^\\*([^*]+)/gm, '- $1')\n      // Add proper spacing around headings\n      .replace(/\\n##/g, '\\n\\n##')\n      // Ensure proper line breaks after bullet points\n      .replace(/\\n-/g, '\\n\\n-')\n      // Clean up any excessive newlines\n      .replace(/\\n{3,}/g, '\\n\\n');\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.formattedMessage,\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          children: formattedContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.mainContent,\n    children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.emptyState,\n      children: \"Upload a PDF and ask questions about it!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.message} ${styles[message.type]}`,\n      children: [message.type === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.avatar,\n        children: \"You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }, this), message.type === 'assistant' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.avatar,\n        children: \"AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.messageContent,\n        children: renderMessageContent(message)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loading,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.loadingDots,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n_s(MainContent, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useRef","useEffect","styles","ReactMarkdown","jsxDEV","_jsxDEV","MainContent","messages","isLoading","_s","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","renderMessageContent","message","type","formattedContent","content","replace","className","formattedMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","mainContent","length","emptyState","map","index","avatar","messageContent","loading","loadingDots","ref","_c","$RefreshReg$"],"sources":["C:/Users/aditi/PDF_upload/Frontend/myapp/src/components/MainContent/MainContent.js"],"sourcesContent":["// import React, { useRef, useEffect } from 'react';\r\n// import styles from './MainContent.module.css';\r\n\r\n// function MainContent({ messages, isLoading }) {\r\n//     const messagesEndRef = useRef(null);\r\n\r\n//     const scrollToBottom = () => {\r\n//         messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         scrollToBottom();\r\n//     }, [messages]);\r\n\r\n//     return (\r\n//         <div className={styles.mainContent}>\r\n//             {messages.length === 0 && (\r\n//                 <div className={styles.emptyState}>\r\n//                     Upload a PDF and ask questions about it!\r\n//                 </div>\r\n//             )}\r\n//             {messages.map((message, index) => (\r\n//                 <div \r\n//                     key={index} \r\n//                     className={`${styles.message} ${styles[message.type]}`}\r\n//                 >\r\n//                     {message.type === 'user' && (\r\n//                         <div className={styles.avatar}>You</div>\r\n//                     )}\r\n//                     {message.type === 'assistant' && (\r\n//                         <div className={styles.avatar}>AI</div>\r\n//                     )}\r\n//                     <div className={styles.messageContent}>\r\n//                         {message.content}\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//             {isLoading && (\r\n//                 <div className={styles.loading}>\r\n//                     <div className={styles.loadingDots}>\r\n//                         <span></span>\r\n//                         <span></span>\r\n//                         <span></span>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//             <div ref={messagesEndRef} />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default MainContent;\r\n\r\nimport React, { useRef, useEffect } from 'react';\r\nimport styles from './MainContent.module.css';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nfunction MainContent({ messages, isLoading }) {\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    const renderMessageContent = (message) => {\r\n        if (message.type === 'assistant') {\r\n            // Format the content to match the desired structure\r\n            let formattedContent = message.content\r\n                // First, handle the sections with double stars\r\n                .replace(/\\*\\*([^*]+)\\*\\*/g, '\\n## $1\\n')\r\n                // Then handle single stars as bullet points, but not inside code blocks\r\n                .replace(/^\\*([^*]+)/gm, '- $1')\r\n                // Add proper spacing around headings\r\n                .replace(/\\n##/g, '\\n\\n##')\r\n                // Ensure proper line breaks after bullet points\r\n                .replace(/\\n-/g, '\\n\\n-')\r\n                // Clean up any excessive newlines\r\n                .replace(/\\n{3,}/g, '\\n\\n');\r\n\r\n            return (\r\n                <div className={styles.formattedMessage}>\r\n                    <ReactMarkdown>\r\n                        {formattedContent}\r\n                    </ReactMarkdown>\r\n                </div>\r\n            );\r\n        }\r\n        return <div>{message.content}</div>;\r\n    };\r\n\r\n    return (\r\n        <div className={styles.mainContent}>\r\n            {messages.length === 0 && (\r\n                <div className={styles.emptyState}>\r\n                    Upload a PDF and ask questions about it!\r\n                </div>\r\n            )}\r\n            {messages.map((message, index) => (\r\n                <div \r\n                    key={index} \r\n                    className={`${styles.message} ${styles[message.type]}`}\r\n                >\r\n                    {message.type === 'user' && (\r\n                        <div className={styles.avatar}>You</div>\r\n                    )}\r\n                    {message.type === 'assistant' && (\r\n                        <div className={styles.avatar}>AI</div>\r\n                    )}\r\n                    <div className={styles.messageContent}>\r\n                        {renderMessageContent(message)}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            {isLoading && (\r\n                <div className={styles.loading}>\r\n                    <div className={styles.loadingDots}>\r\n                        <span></span>\r\n                        <span></span>\r\n                        <span></span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainContent;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,aAAa,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,WAAWA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAMC,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC;EAEnC,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IACzB,CAAAA,qBAAA,GAAAF,cAAc,CAACG,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAClE,CAAC;EAEDd,SAAS,CAAC,MAAM;IACZU,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMS,oBAAoB,GAAIC,OAAO,IAAK;IACtC,IAAIA,OAAO,CAACC,IAAI,KAAK,WAAW,EAAE;MAC9B;MACA,IAAIC,gBAAgB,GAAGF,OAAO,CAACG;MAC3B;MAAA,CACCC,OAAO,CAAC,kBAAkB,EAAE,WAAW;MACxC;MAAA,CACCA,OAAO,CAAC,cAAc,EAAE,MAAM;MAC/B;MAAA,CACCA,OAAO,CAAC,OAAO,EAAE,QAAQ;MAC1B;MAAA,CACCA,OAAO,CAAC,MAAM,EAAE,OAAO;MACxB;MAAA,CACCA,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;MAE/B,oBACIhB,OAAA;QAAKiB,SAAS,EAAEpB,MAAM,CAACqB,gBAAiB;QAAAC,QAAA,eACpCnB,OAAA,CAACF,aAAa;UAAAqB,QAAA,EACTL;QAAgB;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAEd;IACA,oBAAOvB,OAAA;MAAAmB,QAAA,EAAMP,OAAO,CAACG;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACvC,CAAC;EAED,oBACIvB,OAAA;IAAKiB,SAAS,EAAEpB,MAAM,CAAC2B,WAAY;IAAAL,QAAA,GAC9BjB,QAAQ,CAACuB,MAAM,KAAK,CAAC,iBAClBzB,OAAA;MAAKiB,SAAS,EAAEpB,MAAM,CAAC6B,UAAW;MAAAP,QAAA,EAAC;IAEnC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACR,EACArB,QAAQ,CAACyB,GAAG,CAAC,CAACf,OAAO,EAAEgB,KAAK,kBACzB5B,OAAA;MAEIiB,SAAS,EAAE,GAAGpB,MAAM,CAACe,OAAO,IAAIf,MAAM,CAACe,OAAO,CAACC,IAAI,CAAC,EAAG;MAAAM,QAAA,GAEtDP,OAAO,CAACC,IAAI,KAAK,MAAM,iBACpBb,OAAA;QAAKiB,SAAS,EAAEpB,MAAM,CAACgC,MAAO;QAAAV,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAC1C,EACAX,OAAO,CAACC,IAAI,KAAK,WAAW,iBACzBb,OAAA;QAAKiB,SAAS,EAAEpB,MAAM,CAACgC,MAAO;QAAAV,QAAA,EAAC;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACzC,eACDvB,OAAA;QAAKiB,SAAS,EAAEpB,MAAM,CAACiC,cAAe;QAAAX,QAAA,EACjCR,oBAAoB,CAACC,OAAO;MAAC;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC;IAAA,GAXDK,KAAK;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYT,CACR,CAAC,EACDpB,SAAS,iBACNH,OAAA;MAAKiB,SAAS,EAAEpB,MAAM,CAACkC,OAAQ;MAAAZ,QAAA,eAC3BnB,OAAA;QAAKiB,SAAS,EAAEpB,MAAM,CAACmC,WAAY;QAAAb,QAAA,gBAC/BnB,OAAA;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACbvB,OAAA;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACbvB,OAAA;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR,eACDvB,OAAA;MAAKiC,GAAG,EAAE5B;IAAe;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEd;AAACnB,EAAA,CAxEQH,WAAW;AAAAiC,EAAA,GAAXjC,WAAW;AA0EpB,eAAeA,WAAW;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}