{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aditi\\\\PDF_upload\\\\Frontend\\\\myapp\\\\src\\\\components\\\\MainContent\\\\MainContent.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useRef, useEffect } from 'react';\n// import styles from './MainContent.module.css';\n\n// function MainContent({ messages, isLoading }) {\n//     const messagesEndRef = useRef(null);\n\n//     const scrollToBottom = () => {\n//         messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//     };\n\n//     useEffect(() => {\n//         scrollToBottom();\n//     }, [messages]);\n\n//     return (\n//         <div className={styles.mainContent}>\n//             {messages.length === 0 && (\n//                 <div className={styles.emptyState}>\n//                     Upload a PDF and ask questions about it!\n//                 </div>\n//             )}\n//             {messages.map((message, index) => (\n//                 <div \n//                     key={index} \n//                     className={`${styles.message} ${styles[message.type]}`}\n//                 >\n//                     {message.type === 'user' && (\n//                         <div className={styles.avatar}>You</div>\n//                     )}\n//                     {message.type === 'assistant' && (\n//                         <div className={styles.avatar}>AI</div>\n//                     )}\n//                     <div className={styles.messageContent}>\n//                         {message.content}\n//                     </div>\n//                 </div>\n//             ))}\n//             {isLoading && (\n//                 <div className={styles.loading}>\n//                     <div className={styles.loadingDots}>\n//                         <span></span>\n//                         <span></span>\n//                         <span></span>\n//                     </div>\n//                 </div>\n//             )}\n//             <div ref={messagesEndRef} />\n//         </div>\n//     );\n// }\n\n// export default MainContent;\n\n// import React, { useRef, useEffect } from 'react';\n// import styles from './MainContent.module.css';\n\n// function MainContent({ messages, isLoading }) {\n//     const messagesEndRef = useRef(null);\n\n//     const scrollToBottom = () => {\n//         messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n//     };\n\n//     useEffect(() => {\n//         scrollToBottom();\n//     }, [messages]);\n\n//     const formatAssistantMessage = (content) => {\n//         return content.split('\\n').map((line, index) => {\n//             // Check if line is a section header (wrapped in **)\n//             if (line.startsWith('**') && line.endsWith('**')) {\n//                 const headerText = line.slice(2, -2);\n//                 return (\n//                     <div key={index} className={styles.sectionHeader}>\n//                         {headerText}\n//                     </div>\n//                 );\n//             }\n//             // Check if line is a bullet point\n//             else if (line.startsWith('*')) {\n//                 const bulletText = line.slice(1).trim();\n//                 return (\n//                     <div key={index} className={styles.bulletContainer}>\n//                         <span className={styles.bullet}>â€¢</span>\n//                         <span className={styles.bulletText}>{bulletText}</span>\n//                     </div>\n//                 );\n//             }\n//             // Regular text\n//             else if (line.trim()) {\n//                 return (\n//                     <div key={index} className={styles.paragraph}>\n//                         {line}\n//                     </div>\n//                 );\n//             }\n//             return null;\n//         }).filter(Boolean); // Remove null entries\n//     };\n\n//     return (\n//         <div className={styles.mainContent}>\n//             {messages.length === 0 && (\n//                 <div className={styles.emptyState}>\n//                     Upload a PDF and ask questions about it!\n//                 </div>\n//             )}\n//             {messages.map((message, index) => (\n//                 <div \n//                     key={index} \n//                     className={`${styles.message} ${styles[message.type]}`}\n//                 >\n//                     {message.type === 'user' && (\n//                         <div className={styles.avatar}>You</div>\n//                     )}\n//                     {message.type === 'assistant' && (\n//                         <div className={styles.avatar}>AI</div>\n//                     )}\n//                     <div className={styles.messageContent}>\n//                         {message.type === 'assistant' ? (\n//                             <div className={styles.formattedContent}>\n//                                 {formatAssistantMessage(message.content)}\n//                             </div>\n//                         ) : (\n//                             message.content\n//                         )}\n//                     </div>\n//                 </div>\n//             ))}\n//             {isLoading && (\n//                 <div className={styles.loading}>\n//                     <div className={styles.loadingDots}>\n//                         <span></span>\n//                         <span></span>\n//                         <span></span>\n//                     </div>\n//                 </div>\n//             )}\n//             <div ref={messagesEndRef} />\n//         </div>\n//     );\n// }\n\n// export default MainContent;\n\nconst formatAssistantMessage = content => {\n  return content.split('\\n').map((line, index) => {\n    // Updated header check - look for text between colons\n    if (line.match(/^(.+):$/)) {\n      const headerText = line.replace(':', '');\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.sectionHeader,\n        children: headerText\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this);\n    }\n    // Check if line is a bullet point\n    else if (line.startsWith('*')) {\n      const bulletText = line.slice(1).trim();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.bulletContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.bullet,\n          children: \"\\u2022\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.bulletText,\n          children: bulletText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this);\n    }\n    // Regular text\n    else if (line.trim()) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.paragraph,\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this);\n    }\n    return null;\n  }).filter(Boolean); // Remove null entries\n};","map":{"version":3,"names":["formatAssistantMessage","content","split","map","line","index","match","headerText","replace","_jsxDEV","className","styles","sectionHeader","children","fileName","_jsxFileName","lineNumber","columnNumber","startsWith","bulletText","slice","trim","bulletContainer","bullet","paragraph","filter","Boolean"],"sources":["C:/Users/aditi/PDF_upload/Frontend/myapp/src/components/MainContent/MainContent.js"],"sourcesContent":["// import React, { useRef, useEffect } from 'react';\r\n// import styles from './MainContent.module.css';\r\n\r\n// function MainContent({ messages, isLoading }) {\r\n//     const messagesEndRef = useRef(null);\r\n\r\n//     const scrollToBottom = () => {\r\n//         messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         scrollToBottom();\r\n//     }, [messages]);\r\n\r\n//     return (\r\n//         <div className={styles.mainContent}>\r\n//             {messages.length === 0 && (\r\n//                 <div className={styles.emptyState}>\r\n//                     Upload a PDF and ask questions about it!\r\n//                 </div>\r\n//             )}\r\n//             {messages.map((message, index) => (\r\n//                 <div \r\n//                     key={index} \r\n//                     className={`${styles.message} ${styles[message.type]}`}\r\n//                 >\r\n//                     {message.type === 'user' && (\r\n//                         <div className={styles.avatar}>You</div>\r\n//                     )}\r\n//                     {message.type === 'assistant' && (\r\n//                         <div className={styles.avatar}>AI</div>\r\n//                     )}\r\n//                     <div className={styles.messageContent}>\r\n//                         {message.content}\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//             {isLoading && (\r\n//                 <div className={styles.loading}>\r\n//                     <div className={styles.loadingDots}>\r\n//                         <span></span>\r\n//                         <span></span>\r\n//                         <span></span>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//             <div ref={messagesEndRef} />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default MainContent;\r\n\r\n// import React, { useRef, useEffect } from 'react';\r\n// import styles from './MainContent.module.css';\r\n\r\n// function MainContent({ messages, isLoading }) {\r\n//     const messagesEndRef = useRef(null);\r\n\r\n//     const scrollToBottom = () => {\r\n//         messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         scrollToBottom();\r\n//     }, [messages]);\r\n\r\n//     const formatAssistantMessage = (content) => {\r\n//         return content.split('\\n').map((line, index) => {\r\n//             // Check if line is a section header (wrapped in **)\r\n//             if (line.startsWith('**') && line.endsWith('**')) {\r\n//                 const headerText = line.slice(2, -2);\r\n//                 return (\r\n//                     <div key={index} className={styles.sectionHeader}>\r\n//                         {headerText}\r\n//                     </div>\r\n//                 );\r\n//             }\r\n//             // Check if line is a bullet point\r\n//             else if (line.startsWith('*')) {\r\n//                 const bulletText = line.slice(1).trim();\r\n//                 return (\r\n//                     <div key={index} className={styles.bulletContainer}>\r\n//                         <span className={styles.bullet}>â€¢</span>\r\n//                         <span className={styles.bulletText}>{bulletText}</span>\r\n//                     </div>\r\n//                 );\r\n//             }\r\n//             // Regular text\r\n//             else if (line.trim()) {\r\n//                 return (\r\n//                     <div key={index} className={styles.paragraph}>\r\n//                         {line}\r\n//                     </div>\r\n//                 );\r\n//             }\r\n//             return null;\r\n//         }).filter(Boolean); // Remove null entries\r\n//     };\r\n\r\n//     return (\r\n//         <div className={styles.mainContent}>\r\n//             {messages.length === 0 && (\r\n//                 <div className={styles.emptyState}>\r\n//                     Upload a PDF and ask questions about it!\r\n//                 </div>\r\n//             )}\r\n//             {messages.map((message, index) => (\r\n//                 <div \r\n//                     key={index} \r\n//                     className={`${styles.message} ${styles[message.type]}`}\r\n//                 >\r\n//                     {message.type === 'user' && (\r\n//                         <div className={styles.avatar}>You</div>\r\n//                     )}\r\n//                     {message.type === 'assistant' && (\r\n//                         <div className={styles.avatar}>AI</div>\r\n//                     )}\r\n//                     <div className={styles.messageContent}>\r\n//                         {message.type === 'assistant' ? (\r\n//                             <div className={styles.formattedContent}>\r\n//                                 {formatAssistantMessage(message.content)}\r\n//                             </div>\r\n//                         ) : (\r\n//                             message.content\r\n//                         )}\r\n//                     </div>\r\n//                 </div>\r\n//             ))}\r\n//             {isLoading && (\r\n//                 <div className={styles.loading}>\r\n//                     <div className={styles.loadingDots}>\r\n//                         <span></span>\r\n//                         <span></span>\r\n//                         <span></span>\r\n//                     </div>\r\n//                 </div>\r\n//             )}\r\n//             <div ref={messagesEndRef} />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default MainContent;\r\n\r\nconst formatAssistantMessage = (content) => {\r\n    return content.split('\\n').map((line, index) => {\r\n        // Updated header check - look for text between colons\r\n        if (line.match(/^(.+):$/)) {\r\n            const headerText = line.replace(':', '');\r\n            return (\r\n                <div key={index} className={styles.sectionHeader}>\r\n                    {headerText}\r\n                </div>\r\n            );\r\n        }\r\n        // Check if line is a bullet point\r\n        else if (line.startsWith('*')) {\r\n            const bulletText = line.slice(1).trim();\r\n            return (\r\n                <div key={index} className={styles.bulletContainer}>\r\n                    <span className={styles.bullet}>â€¢</span>\r\n                    <span className={styles.bulletText}>{bulletText}</span>\r\n                </div>\r\n            );\r\n        }\r\n        // Regular text\r\n        else if (line.trim()) {\r\n            return (\r\n                <div key={index} className={styles.paragraph}>\r\n                    {line}\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    }).filter(Boolean); // Remove null entries\r\n};\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,sBAAsB,GAAIC,OAAO,IAAK;EACxC,OAAOA,OAAO,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC5C;IACA,IAAID,IAAI,CAACE,KAAK,CAAC,SAAS,CAAC,EAAE;MACvB,MAAMC,UAAU,GAAGH,IAAI,CAACI,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MACxC,oBACIC,OAAA;QAAiBC,SAAS,EAAEC,MAAM,CAACC,aAAc;QAAAC,QAAA,EAC5CN;MAAU,GADLF,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAEd;IACA;IAAA,KACK,IAAIb,IAAI,CAACc,UAAU,CAAC,GAAG,CAAC,EAAE;MAC3B,MAAMC,UAAU,GAAGf,IAAI,CAACgB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACvC,oBACIZ,OAAA;QAAiBC,SAAS,EAAEC,MAAM,CAACW,eAAgB;QAAAT,QAAA,gBAC/CJ,OAAA;UAAMC,SAAS,EAAEC,MAAM,CAACY,MAAO;UAAAV,QAAA,EAAC;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACxCR,OAAA;UAAMC,SAAS,EAAEC,MAAM,CAACQ,UAAW;UAAAN,QAAA,EAAEM;QAAU;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA,GAFjDZ,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CAAC;IAEd;IACA;IAAA,KACK,IAAIb,IAAI,CAACiB,IAAI,CAAC,CAAC,EAAE;MAClB,oBACIZ,OAAA;QAAiBC,SAAS,EAAEC,MAAM,CAACa,SAAU;QAAAX,QAAA,EACxCT;MAAI,GADCC,KAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAEd;IACA,OAAO,IAAI;EACf,CAAC,CAAC,CAACQ,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}