{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aditi\\\\PDF_upload\\\\Frontend\\\\myapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './App.css';\n// import Header from './components/Header/Header';\n// import ChatInput from './components/ChatInput/ChatInput';\n// import MainContent from './components/MainContent/MainContent';\n\n// function App() {\n//     const [uploadedFile, setUploadedFile] = useState(null);\n\n//     // Add this to handle uploaded file\n//     const handleFileUpload = (file) => {\n//         setUploadedFile(file);\n//         console.log(\"File uploaded:\", file);\n//     };\n\n//     return (\n//         <div className='app-container'>\n//             <Header setUploadedFile={handleFileUpload} />\n//             <MainContent fileData={uploadedFile} /> {/* Pass the file data */}\n//             <ChatInput />\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ChatInput from './components/ChatInput/ChatInput';\nimport MainContent from './components/MainContent/MainContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Handle file upload\n  const handleFileUpload = async file => {\n    setIsLoading(true);\n    setError(null);\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch('http://localhost:8000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) throw new Error('Upload failed');\n      const data = await response.json();\n      setUploadedFile(data);\n      // Add system message after successful upload\n      setMessages(prev => [...prev, {\n        type: 'system',\n        content: `PDF \"${file.name}\" uploaded successfully. You can now ask questions about it.`\n      }]);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle sending questions\n  const handleSendMessage = async question => {\n    if (!uploadedFile) {\n      setError('Please upload a PDF first');\n      return;\n    }\n\n    // Add user question to messages\n    setMessages(prev => [...prev, {\n      type: 'user',\n      content: question\n    }]);\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/ask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          file_id: uploadedFile.id,\n          question: question\n        })\n      });\n      if (!response.ok) throw new Error('Failed to get answer');\n      const data = await response.json();\n      setMessages(prev => [...prev, {\n        type: 'assistant',\n        content: data.answer\n      }]);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      setUploadedFile: handleFileUpload,\n      isLoading: isLoading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      messages: messages,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage,\n      disabled: !uploadedFile || isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"/HSsxK/6sNDFRoKGai79YBTb2Qg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","ChatInput","MainContent","jsxDEV","_jsxDEV","App","_s","uploadedFile","setUploadedFile","messages","setMessages","isLoading","setIsLoading","error","setError","handleFileUpload","file","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","prev","type","content","name","err","message","handleSendMessage","question","headers","JSON","stringify","file_id","id","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aditi/PDF_upload/Frontend/myapp/src/App.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import './App.css';\r\n// import Header from './components/Header/Header';\r\n// import ChatInput from './components/ChatInput/ChatInput';\r\n// import MainContent from './components/MainContent/MainContent';\r\n\r\n// function App() {\r\n//     const [uploadedFile, setUploadedFile] = useState(null);\r\n\r\n//     // Add this to handle uploaded file\r\n//     const handleFileUpload = (file) => {\r\n//         setUploadedFile(file);\r\n//         console.log(\"File uploaded:\", file);\r\n//     };\r\n\r\n//     return (\r\n//         <div className='app-container'>\r\n//             <Header setUploadedFile={handleFileUpload} />\r\n//             <MainContent fileData={uploadedFile} /> {/* Pass the file data */}\r\n//             <ChatInput />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport ChatInput from './components/ChatInput/ChatInput';\r\nimport MainContent from './components/MainContent/MainContent';\r\n\r\nfunction App() {\r\n    const [uploadedFile, setUploadedFile] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Handle file upload\r\n    const handleFileUpload = async (file) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        \r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8000/upload', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Upload failed');\r\n\r\n            const data = await response.json();\r\n            setUploadedFile(data);\r\n            // Add system message after successful upload\r\n            setMessages(prev => [...prev, {\r\n                type: 'system',\r\n                content: `PDF \"${file.name}\" uploaded successfully. You can now ask questions about it.`\r\n            }]);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Handle sending questions\r\n    const handleSendMessage = async (question) => {\r\n        if (!uploadedFile) {\r\n            setError('Please upload a PDF first');\r\n            return;\r\n        }\r\n\r\n        // Add user question to messages\r\n        setMessages(prev => [...prev, { type: 'user', content: question }]);\r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const response = await fetch('http://localhost:8000/ask', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    file_id: uploadedFile.id,\r\n                    question: question\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Failed to get answer');\r\n\r\n            const data = await response.json();\r\n            setMessages(prev => [...prev, { type: 'assistant', content: data.answer }]);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='app-container'>\r\n            <Header \r\n                setUploadedFile={handleFileUpload} \r\n                isLoading={isLoading}\r\n                error={error}\r\n            />\r\n            <MainContent \r\n                messages={messages} \r\n                isLoading={isLoading} \r\n            />\r\n            <ChatInput \r\n                onSendMessage={handleSendMessage}\r\n                disabled={!uploadedFile || isLoading}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}