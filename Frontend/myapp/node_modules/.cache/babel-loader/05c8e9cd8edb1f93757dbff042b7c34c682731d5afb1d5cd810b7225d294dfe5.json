{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aditi\\\\Pdf_upload\\\\Frontend\\\\myapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import './App.css';\n// import Header from './components/Header/Header';\n// import ChatInput from './components/ChatInput/ChatInput';\n// import MainContent from './components/MainContent/MainContent';\n\n// function App() {\n//     return (\n//         <div className='app-container'>\n//           <Header />\n//           <MainContent />\n//           <ChatInput />\n//         </div>\n//     );\n//     }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport ChatInput from './components/ChatInput/ChatInput';\nimport MainContent from './components/MainContent/MainContent';\nimport PDFUpload from './components/PDFUpload/PDFUpload';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [answers, setAnswers] = useState([]);\n  const handleQuestion = async question => {\n    if (!uploadedFile) {\n      setError(\"Please upload a PDF first\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/ask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          file_id: uploadedFile.id,\n          question: question\n        })\n      });\n      if (!response.ok) throw new Error('Failed to get answer');\n      const data = await response.json();\n      setAnswers(prev => [...prev, {\n        question,\n        answer: data.answer\n      }]);\n      setError(null);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [!uploadedFile ? /*#__PURE__*/_jsxDEV(PDFUpload, {\n        setUploadedFile: setUploadedFile,\n        setLoading: setLoading,\n        setError: setError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"qa-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"file-info\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Current PDF: \", uploadedFile.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), answers.map((qa, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qa-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"question\",\n            children: [\"Q: \", qa.question]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"answer\",\n            children: [\"A: \", qa.answer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSubmit: handleQuestion,\n      disabled: !uploadedFile || loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"vey19SswQgEH8iT2NvUMOJl+n1w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","ChatInput","MainContent","PDFUpload","jsxDEV","_jsxDEV","App","_s","uploadedFile","setUploadedFile","loading","setLoading","error","setError","answers","setAnswers","handleQuestion","question","response","fetch","method","headers","body","JSON","stringify","file_id","id","ok","Error","data","json","prev","answer","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","map","qa","index","onSubmit","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aditi/Pdf_upload/Frontend/myapp/src/App.js"],"sourcesContent":["// import React from 'react';\r\n// import './App.css';\r\n// import Header from './components/Header/Header';\r\n// import ChatInput from './components/ChatInput/ChatInput';\r\n// import MainContent from './components/MainContent/MainContent';\r\n\r\n\r\n// function App() {\r\n//     return (\r\n//         <div className='app-container'>\r\n//           <Header />\r\n//           <MainContent />\r\n//           <ChatInput />\r\n//         </div>\r\n//     );\r\n//     }\r\n    \r\n// export default App;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport ChatInput from './components/ChatInput/ChatInput';\r\nimport MainContent from './components/MainContent/MainContent';\r\nimport PDFUpload from './components/PDFUpload/PDFUpload';\r\n\r\nfunction App() {\r\n    const [uploadedFile, setUploadedFile] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [answers, setAnswers] = useState([]);\r\n\r\n    const handleQuestion = async (question) => {\r\n        if (!uploadedFile) {\r\n            setError(\"Please upload a PDF first\");\r\n            return;\r\n        }\r\n        \r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch('http://localhost:8000/ask', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    file_id: uploadedFile.id,\r\n                    question: question\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Failed to get answer');\r\n\r\n            const data = await response.json();\r\n            setAnswers(prev => [...prev, { question, answer: data.answer }]);\r\n            setError(null);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='app-container'>\r\n            <Header />\r\n            <MainContent>\r\n                {!uploadedFile ? (\r\n                    <PDFUpload \r\n                        setUploadedFile={setUploadedFile}\r\n                        setLoading={setLoading}\r\n                        setError={setError}\r\n                    />\r\n                ) : (\r\n                    <div className=\"qa-section\">\r\n                        <div className=\"file-info\">\r\n                            <p>Current PDF: {uploadedFile.name}</p>\r\n                        </div>\r\n                        {answers.map((qa, index) => (\r\n                            <div key={index} className=\"qa-item\">\r\n                                <p className=\"question\">Q: {qa.question}</p>\r\n                                <p className=\"answer\">A: {qa.answer}</p>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n                {loading && <div className=\"loader\">Loading...</div>}\r\n                {error && <div className=\"error\">{error}</div>}\r\n            </MainContent>\r\n            <ChatInput onSubmit={handleQuestion} disabled={!uploadedFile || loading} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}